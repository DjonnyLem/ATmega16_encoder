
Mega_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000342  000003d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  000003d6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b3b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001b0  00000000  00000000  00000b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000010ff  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000533  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c40  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003cc  00000000  00000000  00002f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000034d  00000000  00000000  00003358  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000011a1  00000000  00000000  000036a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000180  00000000  00000000  00004846  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000054 <convert_HD44780>:
  54:	41 a0 42 a1 e0 45 a3 a4 a5 a6 4b a7 4d 48 4f a8     A.B..E....K.MHO.
  64:	50 43 54 a9 aa 58 e1 ab ac e2 ad ae ad af b0 b1     PCT..X..........
  74:	61 b2 b3 b4 e3 65 b6 b7 b8 b9 ba bb bc bd 6f be     a....e........o.
  84:	70 63 bf 79 e4 78 e5 c0 c1 e6 c2 c3 c4 c5 c6 c7     pc.y.x..........

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a0 37       	cpi	r26, 0x70	; 112
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  b4:	0c 94 9f 01 	jmp	0x33e	; 0x33e <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <init>:
; вывод сконфигурирован выходом, а 1 включает выход относительно минуса питания
;=======================================================================*/
	                 /*НАСТРОЙКА ПОРТОВ*/
#if 1

DDRA  = 0b11111111;			//если 0 значит вход
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8a bb       	out	0x1a, r24	; 26
PORTA = 0b00000000;			//если 1 подтяжка включена
  c0:	1b ba       	out	0x1b, r1	; 27

DDRB  = 0b11100000;       
  c2:	90 ee       	ldi	r25, 0xE0	; 224
  c4:	97 bb       	out	0x17, r25	; 23
PORTB = 0b00011111;       
  c6:	9f e1       	ldi	r25, 0x1F	; 31
  c8:	98 bb       	out	0x18, r25	; 24

DDRC  = 0b11111111;
  ca:	84 bb       	out	0x14, r24	; 20
PORTC = 0b00000000;
  cc:	15 ba       	out	0x15, r1	; 21

DDRD  = 0b10110000;       
  ce:	90 eb       	ldi	r25, 0xB0	; 176
  d0:	91 bb       	out	0x11, r25	; 17
PORTD = 0b01001111;       
  d2:	9f e4       	ldi	r25, 0x4F	; 79
  d4:	92 bb       	out	0x12, r25	; 18
#endif
//=========================================================================================
					  /*Настройка таймера TCNT2*/ 
#if 1// 
//000-таймер выкл, 001-0, 010-8,011 - 32, 100 - 64, 101 - 128, 110 - 256, 111 - 1024.
TCCR2=(0<<FOC2)|(1<<WGM20)|(1<<COM21)|(0<<COM20)|(1<<WGM21)|(1<<CS22)|(0<<CS21)|(0<<CS20); 
  d6:	9c e6       	ldi	r25, 0x6C	; 108
  d8:	95 bd       	out	0x25, r25	; 37
ASSR=(0<<AS2)|(0<<TCN2UB)|(0<<OCR2UB)|(0<<TCR2UB); 
  da:	12 bc       	out	0x22, r1	; 34
TIMSK|=(0<<OCIE2)|(0<<TOIE2);
  dc:	99 b7       	in	r25, 0x39	; 57
  de:	99 bf       	out	0x39, r25	; 57
OCR2=255;
  e0:	83 bd       	out	0x23, r24	; 35
#endif
//=========================================================================================
					  /*АНАЛОГОВЫЙ КОМПАРАТОР*/
#if 1
ACSR=(1<<ACD)|(0<<ACBG)|(0<<ACO)|(0<<ACI)|(0<<ACIE)|(0<<ACIC)|(0<<ACIS1)|(0<<ACIS0);
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	82 e5       	ldi	r24, 0x52	; 82
  ea:	97 e0       	ldi	r25, 0x07	; 7
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <init+0x30>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <init+0x3a>
  f6:	00 00       	nop

#endif
//=========================================================================================
		
_delay_ms(150);						
LCDinit();		 //Инициализация          LCD дисплея 314байт
  f8:	0e 94 1d 01 	call	0x23a	; 0x23a <LCDinit>

sei();			 //Разрешаем прерывания.
  fc:	78 94       	sei
  fe:	08 95       	ret

00000100 <OutPin>:
	BCD_Calc(digit, value, flag, buf, i, 1000000000);
	BCD_Calc(digit, value, flag, buf, i, 100000000);
	BCD_Calc(digit, value, flag, buf, i, 10000000);
	BCD_Calc(digit, value, flag, buf, i, 1000000);
	BCD_Calc(digit, value, flag, buf, i, 100000);
	BCD_Calc(digit, value, flag, buf, i, 10000);
 100:	81 b3       	in	r24, 0x11	; 17
 102:	8f 60       	ori	r24, 0x0F	; 15
 104:	81 bb       	out	0x11, r24	; 17
 106:	82 b3       	in	r24, 0x12	; 18
 108:	80 7f       	andi	r24, 0xF0	; 240
	BCD_Calc(digit, value, flag, buf, i, 1000);
 10a:	82 bb       	out	0x12, r24	; 18
 10c:	08 95       	ret

0000010e <Strob>:
 10e:	c4 9a       	sbi	0x18, 4	; 24
 110:	85 e0       	ldi	r24, 0x05	; 5
 112:	8a 95       	dec	r24
 114:	f1 f7       	brne	.-4      	; 0x112 <Strob+0x4>
 116:	00 00       	nop
 118:	c4 98       	cbi	0x18, 4	; 24
 11a:	08 95       	ret

0000011c <Busy_flag>:
 11c:	cf 93       	push	r28
 11e:	81 b3       	in	r24, 0x11	; 17
 120:	80 7f       	andi	r24, 0xF0	; 240
 122:	81 bb       	out	0x11, r24	; 17
 124:	82 b3       	in	r24, 0x12	; 18
 126:	8f 60       	ori	r24, 0x0F	; 15
 128:	82 bb       	out	0x12, r24	; 18
 12a:	c3 9a       	sbi	0x18, 3	; 24
 12c:	c4 9a       	sbi	0x18, 4	; 24
 12e:	00 00       	nop
 130:	00 00       	nop
 132:	c0 b3       	in	r28, 0x10	; 16
	BCD_Calc(digit, value, flag, buf, i, 100);
 134:	c4 98       	cbi	0x18, 4	; 24
 136:	00 00       	nop
 138:	00 00       	nop
 13a:	0e 94 87 00 	call	0x10e	; 0x10e <Strob>
 13e:	00 00       	nop
 140:	00 00       	nop
 142:	c3 fd       	sbrc	r28, 3
 144:	f3 cf       	rjmp	.-26     	; 0x12c <Busy_flag+0x10>
 146:	c3 98       	cbi	0x18, 3	; 24
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <Send_byte>:
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	c8 2f       	mov	r28, r24
 152:	0e 94 80 00 	call	0x100	; 0x100 <OutPin>
 156:	9c 2f       	mov	r25, r28
 158:	92 95       	swap	r25
 15a:	9f 70       	andi	r25, 0x0F	; 15
	BCD_Calc(digit, value, flag, buf, i, 10);
 15c:	dc 2f       	mov	r29, r28
 15e:	df 70       	andi	r29, 0x0F	; 15
 160:	90 fd       	sbrc	r25, 0
 162:	90 9a       	sbi	0x12, 0	; 18
 164:	96 95       	lsr	r25
 166:	90 fd       	sbrc	r25, 0
 168:	91 9a       	sbi	0x12, 1	; 18
 16a:	96 95       	lsr	r25
 16c:	90 fd       	sbrc	r25, 0
 16e:	92 9a       	sbi	0x12, 2	; 18
 170:	96 95       	lsr	r25
 172:	09 f0       	breq	.+2      	; 0x176 <Send_byte+0x2a>
 174:	93 9a       	sbi	0x12, 3	; 18
 176:	0e 94 87 00 	call	0x10e	; 0x10e <Strob>
 17a:	0e 94 80 00 	call	0x100	; 0x100 <OutPin>
 17e:	c0 fd       	sbrc	r28, 0
	
	value += BCD_SYMBOL;
 180:	90 9a       	sbi	0x12, 0	; 18
 182:	8d 2f       	mov	r24, r29
 184:	86 95       	lsr	r24
 186:	80 fd       	sbrc	r24, 0
 188:	91 9a       	sbi	0x12, 1	; 18
	BCD_SaveDataInBuf(value, buf, i);
 18a:	86 95       	lsr	r24
 18c:	80 fd       	sbrc	r24, 0
 18e:	92 9a       	sbi	0x12, 2	; 18
 190:	86 95       	lsr	r24
 192:	09 f0       	breq	.+2      	; 0x196 <Send_byte+0x4a>
	BCD_AddEndStrInBuf(0, buf, i);
 194:	93 9a       	sbi	0x12, 3	; 18
 196:	0e 94 87 00 	call	0x10e	; 0x10e <Strob>
{
	#ifdef  LCD_8BIT
			DDDR =0;
			DPORT=0;
	#else
			DDDR &=~((1<<DB7)|(1<<DB6)|(1<<DB5)|(1<<DB4));
 19a:	81 b3       	in	r24, 0x11	; 17
 19c:	80 7f       	andi	r24, 0xF0	; 240
 19e:	81 bb       	out	0x11, r24	; 17
			DPORT&=~((1<<DB7)|(1<<DB6)|(1<<DB5)|(1<<DB4));
 1a0:	82 b3       	in	r24, 0x12	; 18
 1a2:	80 7f       	andi	r24, 0xF0	; 240
 1a4:	82 bb       	out	0x12, r24	; 18
	
			Strob();
	#endif
	
	HiPin();
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <LCDcommand>:
	LCDcommand(0b10);
}

//Системные функции, их не трогаем, они для работы дисплея.
static void LCDcommand(uint8_t i)	//Отправка команды, настройка дисплея.
{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	1f 92       	push	r1
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
	Busy_flag();	//Проверим сперва флаг занятости, а свободен ли дисплей?
 1b6:	89 83       	std	Y+1, r24	; 0x01
 1b8:	0e 94 8e 00 	call	0x11c	; 0x11c <Busy_flag>
	Send_byte(i);
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
}
 1be:	0f 90       	pop	r0
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28

//Системные функции, их не трогаем, они для работы дисплея.
static void LCDcommand(uint8_t i)	//Отправка команды, настройка дисплея.
{
	Busy_flag();	//Проверим сперва флаг занятости, а свободен ли дисплей?
	Send_byte(i);
 1c4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <Send_byte>

000001c8 <LCDdata>:
};

//Пользовательские функции для LCD, ими пользуемся в программе.
#if 1
void LCDdata(uint8_t i)						//Отправка символа для отображения на дисплее.
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	1f 92       	push	r1
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	Busy_flag();	//Проверим сперва флаг занятости, а свободен ли дисплей?
 1d2:	89 83       	std	Y+1, r24	; 0x01
 1d4:	0e 94 8e 00 	call	0x11c	; 0x11c <Busy_flag>
	CPORT|=(1<<RS); //RS=1 посылаем данные в LCD
 1d8:	c2 9a       	sbi	0x18, 2	; 24
	CPORT&=~(1<<E);//Выключили строб.
}
static uint8_t lcd_rus(uint8_t c)
{

	if  (c > 191)
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	80 3c       	cpi	r24, 0xC0	; 192
 1de:	30 f0       	brcs	.+12     	; 0x1ec <LCDdata+0x24>
	{
		c -=192;
 1e0:	80 5c       	subi	r24, 0xC0	; 192
		c= pgm_read_byte(&convert_HD44780[c]);
 1e2:	e8 2f       	mov	r30, r24
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ec 5a       	subi	r30, 0xAC	; 172
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	84 91       	lpm	r24, Z
#if 1
void LCDdata(uint8_t i)						//Отправка символа для отображения на дисплее.
{
	Busy_flag();	//Проверим сперва флаг занятости, а свободен ли дисплей?
	CPORT|=(1<<RS); //RS=1 посылаем данные в LCD
	Send_byte(lcd_rus(i));
 1ec:	0e 94 a6 00 	call	0x14c	; 0x14c <Send_byte>
	CPORT&=~(1<<RS);//RS=0
 1f0:	c2 98       	cbi	0x18, 2	; 24
}
 1f2:	0f 90       	pop	r0
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <LCDGotoXY>:
}
void LCDGotoXY(uint8_t x,uint8_t y)			//Устанавливаем курсор в X, Y позицию
{
	 uint8_t Address;
	
	switch(y)
 1fa:	61 30       	cpi	r22, 0x01	; 1
 1fc:	09 f4       	brne	.+2      	; 0x200 <LCDGotoXY+0x6>
	{
		case 0: Address = LINE0+x; 
				break;
		case 1: Address = LINE1+x; 
 1fe:	80 5c       	subi	r24, 0xC0	; 192
				break;
		default: Address = LINE0+x;
	}
	
	LCDcommand(1<<7 | Address);
 200:	80 68       	ori	r24, 0x80	; 128
 202:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCDcommand>

00000206 <LCDstring_of_sramXY>:
		LCDdata(*s++ );
	}
	
}
void LCDstring_of_sramXY(uint8_t* data,uint8_t x, uint8_t y)
{
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	ec 01       	movw	r28, r24
 20e:	86 2f       	mov	r24, r22
	LCDGotoXY(x,y);
 210:	64 2f       	mov	r22, r20
 212:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCDGotoXY>
	if (!data)
 216:	20 97       	sbiw	r28, 0x00	; 0
 218:	29 f4       	brne	.+10     	; 0x224 <LCDstring_of_sramXY+0x1e>
 21a:	0b c0       	rjmp	.+22     	; 0x232 <LCDstring_of_sramXY+0x2c>
	}
	
	uint8_t i=0;
	while(data[i] != '\0')
	{
		LCDdata(data[i]);
 21c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCDdata>
		i++;
 220:	1f 5f       	subi	r17, 0xFF	; 255
 222:	01 c0       	rjmp	.+2      	; 0x226 <LCDstring_of_sramXY+0x20>
	
}
void LCDstring_of_sramXY(uint8_t* data,uint8_t x, uint8_t y)
{
	LCDGotoXY(x,y);
	if (!data)
 224:	10 e0       	ldi	r17, 0x00	; 0
	{
		return;
	}
	
	uint8_t i=0;
	while(data[i] != '\0')
 226:	fe 01       	movw	r30, r28
 228:	e1 0f       	add	r30, r17
 22a:	f1 1d       	adc	r31, r1
 22c:	80 81       	ld	r24, Z
 22e:	81 11       	cpse	r24, r1
 230:	f5 cf       	rjmp	.-22     	; 0x21c <LCDstring_of_sramXY+0x16>
	{
		LCDdata(data[i]);
		i++;
	}
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	08 95       	ret

0000023a <LCDinit>:
	{
		LCDdata((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
void LCDinit(void)							//Инициализируем дисплей
{
 23a:	cf 93       	push	r28
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	81 ee       	ldi	r24, 0xE1	; 225
 240:	94 e0       	ldi	r25, 0x04	; 4
 242:	21 50       	subi	r18, 0x01	; 1
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <LCDinit+0x8>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCDinit+0x12>
 24c:	00 00       	nop
	//Перед инициализацией LCD, надо в init задержку в 100 мсек сделать, чтоб питание устаканилось. 
	_delay_ms(100);
	CDDR |=  (1<<RS)|(1<<E)|(1<<RW);   //Настройка портов 
 24e:	87 b3       	in	r24, 0x17	; 23
 250:	8c 61       	ori	r24, 0x1C	; 28
 252:	87 bb       	out	0x17, r24	; 23
	CPORT&=~((1<<RS)|(1<<E)|(1<<RW));  //Настройка портов 
 254:	88 b3       	in	r24, 0x18	; 24
 256:	83 7e       	andi	r24, 0xE3	; 227
 258:	88 bb       	out	0x18, r24	; 24
	OutPin();						   //Настройка портов
 25a:	0e 94 80 00 	call	0x100	; 0x100 <OutPin>
 25e:	c3 e0       	ldi	r28, 0x03	; 3
	while (i!=3)
	{
		#ifdef  LCD_8BIT       //отправка символа 0x30.
		        DPORT|=(0<<DB7)|(0<<DB6)|(1<<DB5)|(1<<DB4)|(0<<DB3)|(0<<DB2)|(0<<DB1)|(0<<DB0);
		#else
				DPORT|=(0<<DB7)|(0<<DB6)|(1<<DB5)|(1<<DB4);
 260:	82 b3       	in	r24, 0x12	; 18
 262:	83 60       	ori	r24, 0x03	; 3
 264:	82 bb       	out	0x12, r24	; 18
		#endif
		
		Strob();
 266:	0e 94 87 00 	call	0x10e	; 0x10e <Strob>
 26a:	8f e1       	ldi	r24, 0x1F	; 31
 26c:	9e e4       	ldi	r25, 0x4E	; 78
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCDinit+0x34>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCDinit+0x3a>
 274:	00 00       	nop
 276:	c1 50       	subi	r28, 0x01	; 1
	CDDR |=  (1<<RS)|(1<<E)|(1<<RW);   //Настройка портов 
	CPORT&=~((1<<RS)|(1<<E)|(1<<RW));  //Настройка портов 
	OutPin();						   //Настройка портов
	
	uint8_t i=0;
	while (i!=3)
 278:	99 f7       	brne	.-26     	; 0x260 <LCDinit+0x26>
	//Разминочный этап закончен, далее переходим к основным упражнениям.
	
	#ifdef  LCD_8BIT
			LCDcommand(0b00111000);//8ми битный интерфейс, две строки, 5x8 точек.
	#else   //Первый раз отправляем только пол старшей тетрады
			Busy_flag();
 27a:	0e 94 8e 00 	call	0x11c	; 0x11c <Busy_flag>
			OutPin();
 27e:	0e 94 80 00 	call	0x100	; 0x100 <OutPin>
			DPORT|=(0<<DB7)|(0<<DB6)|(1<<DB5)|(0<<DB4);//4х битный интерфейс 
 282:	91 9a       	sbi	0x12, 1	; 18
			Strob();
 284:	0e 94 87 00 	call	0x10e	; 0x10e <Strob>
			LCDcommand(0b00101000);//Две строки, 5x8 точек.
 288:	88 e2       	ldi	r24, 0x28	; 40
 28a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCDcommand>
	#endif
	
	LCDcommand(0b1100);  //Включаем дисплей + без отображения курсоров.
 28e:	8c e0       	ldi	r24, 0x0C	; 12
 290:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCDcommand>
	LCDcommand(0b110);   //Счетчик адреса всегда будет смещаться на n+1
 294:	86 e0       	ldi	r24, 0x06	; 6
 296:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCDcommand>
	LCDcommand(0b10);    //курсор в позицию 0,0 + сброс всех сдвигов
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCDcommand>
	LCDcommand(0b1);     //очистка дисплея 
 2a0:	81 e0       	ldi	r24, 0x01	; 1
	//Основные упражнения закончены. Переходим к релаксации.
}
 2a2:	cf 91       	pop	r28
	#endif
	
	LCDcommand(0b1100);  //Включаем дисплей + без отображения курсоров.
	LCDcommand(0b110);   //Счетчик адреса всегда будет смещаться на n+1
	LCDcommand(0b10);    //курсор в позицию 0,0 + сброс всех сдвигов
	LCDcommand(0b1);     //очистка дисплея 
 2a4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCDcommand>

000002a8 <BCD_GetPointerBuf>:
	#ifdef BCD_USE_BUF
	return (uint8_t*)buf;
	#else
	return (uint8_t *)0;
	#endif
}
 2a8:	80 e6       	ldi	r24, 0x60	; 96
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	08 95       	ret

000002ae <BCD_3>:
	uint8_t digit, flag;
	
	flag = SYMB_NULL;

	BCD_InitIndexBuf(i);
	BCD_Calc(digit, value, flag, buf, i, 100);
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <BCD_3+0x8>
 2b2:	9f 5f       	subi	r25, 0xFF	; 255
 2b4:	84 56       	subi	r24, 0x64	; 100
 2b6:	84 36       	cpi	r24, 0x64	; 100
 2b8:	e0 f7       	brcc	.-8      	; 0x2b2 <BCD_3+0x4>
 2ba:	99 23       	and	r25, r25
 2bc:	19 f0       	breq	.+6      	; 0x2c4 <BCD_3+0x16>
 2be:	90 5d       	subi	r25, 0xD0	; 208
 2c0:	20 e3       	ldi	r18, 0x30	; 48
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <BCD_3+0x1a>

void BCD_3(uint8_t value)
{
	uint8_t digit, flag;
	
	flag = SYMB_NULL;
 2c4:	20 e2       	ldi	r18, 0x20	; 32

	BCD_InitIndexBuf(i);
	BCD_Calc(digit, value, flag, buf, i, 100);
 2c6:	90 e2       	ldi	r25, 0x20	; 32
 2c8:	90 93 60 00 	sts	0x0060, r25
	BCD_Calc(digit, value, flag, buf, i, 10);
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <BCD_3+0x26>
 2d0:	9f 5f       	subi	r25, 0xFF	; 255
 2d2:	8a 50       	subi	r24, 0x0A	; 10
 2d4:	8a 30       	cpi	r24, 0x0A	; 10
 2d6:	e0 f7       	brcc	.-8      	; 0x2d0 <BCD_3+0x22>
 2d8:	99 23       	and	r25, r25
 2da:	11 f0       	breq	.+4      	; 0x2e0 <BCD_3+0x32>
 2dc:	90 5d       	subi	r25, 0xD0	; 208
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <BCD_3+0x34>
 2e0:	92 2f       	mov	r25, r18
 2e2:	90 93 61 00 	sts	0x0061, r25
	
	value += BCD_SYMBOL;
 2e6:	80 5d       	subi	r24, 0xD0	; 208
	BCD_SaveDataInBuf(value, buf, i);
 2e8:	80 93 62 00 	sts	0x0062, r24
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	80 93 6c 00 	sts	0x006C, r24
	BCD_AddEndStrInBuf(0, buf, i);
 2f2:	10 92 63 00 	sts	0x0063, r1
 2f6:	08 95       	ret

000002f8 <main>:
uint8_t *pBuf;//определяем переменную указатель на буфер
uint8_t count; 	
	 				
int main(void)
{
	init();//Инициализация МК и остальной обвязки.
 2f8:	0e 94 5e 00 	call	0xbc	; 0xbc <init>
	pBuf=BCD_GetPointerBuf();//инициализация переменной pBuf 
 2fc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <BCD_GetPointerBuf>
 300:	90 93 6e 00 	sts	0x006E, r25
 304:	80 93 6d 00 	sts	0x006D, r24
							 //для вывода данных на LCD.
    while(1)
	{
		BCD_3(count);
 308:	80 91 6f 00 	lds	r24, 0x006F
 30c:	0e 94 57 01 	call	0x2ae	; 0x2ae <BCD_3>
		LCDstring_of_sramXY(pBuf,5,0);
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	65 e0       	ldi	r22, 0x05	; 5
 314:	80 91 6d 00 	lds	r24, 0x006D
 318:	90 91 6e 00 	lds	r25, 0x006E
 31c:	0e 94 03 01 	call	0x206	; 0x206 <LCDstring_of_sramXY>
		count++;
 320:	80 91 6f 00 	lds	r24, 0x006F
 324:	8f 5f       	subi	r24, 0xFF	; 255
 326:	80 93 6f 00 	sts	0x006F, r24
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	83 ec       	ldi	r24, 0xC3	; 195
 32e:	99 e0       	ldi	r25, 0x09	; 9
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x38>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x42>
 33a:	00 00       	nop
 33c:	e5 cf       	rjmp	.-54     	; 0x308 <main+0x10>

0000033e <_exit>:
 33e:	f8 94       	cli

00000340 <__stop_program>:
 340:	ff cf       	rjmp	.-2      	; 0x340 <__stop_program>
